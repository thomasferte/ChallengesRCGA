---
title: "High dimension reservoir"
format: gfm
editor: visual
echo: false
message: false
warning: false
prefer-html: true
---

```{r}
########## LOAD PACKAGES #####
library(dplyr)
library(parallel)
library(ggplot2)
source(file = here::here("script/FctCleanFeaturesName.R"))
set.seed(1)
```

# Forecast

```{r}
### 1) Load data
path_predictions <- here::here("results/experience_1/prediction")
ls_files <- list.files(path_predictions)
ls_files_full <- list.files(path_predictions, full.names = TRUE)
names(ls_files_full) <- gsub(ls_files, pattern = "_combined.csv", replacement = "")

df_all_temp <- lapply(ls_files_full, read.csv) %>%
  bind_rows(.id = "model") %>%
  mutate(outcomeDate = as.Date(outcomeDate),
         model = factor(model)) %>%
  group_by(outcomeDate, model) %>%
  filter(outcomeDate >= as.Date("2021-03-15"))

df_all <- df_all_temp %>% slice_min(hp_date) %>% mutate(update = "No") %>%
  bind_rows(df_all_temp %>% slice_max(hp_date) %>% mutate(update = "Yes")) %>%
  ungroup() |> 
  tidyr::separate_wider_regex(
    model,
    patterns = c("GeneticSingleIs_GA_GAHPDEF_pmutQuant", 
                 pmutQuant = "[0-9]+", 
                 "_pmutCat", 
                 pmutCat = "[0-9]+",
                 "_sigmahalv",
                 lr_sigma = "[0-9]+")) |> 
  mutate(across(.cols = c(pmutQuant, pmutCat, lr_sigma),
                .fns = ~ as.numeric(.x)/1000),
         short_name_model = paste0("PmutQuant = ", pmutQuant, " ; PmutCat = ", pmutCat, " ; lr sigma = ", lr_sigma),
         update = factor(update, levels = c("No", "Yes"), labels = c("No monthly update", "Monthly update")))
```

## Performance

### Sanity check

```{r sanitycheck, fig.height=6, fig.cap="Number of reservoir per day for prediction"}
df_all |> 
  group_by(update, short_name_model, outcomeDate) |> 
  summarise(n = n(), .groups = "drop") |> 
  ggplot(mapping = aes(x = outcomeDate, y = n, color = update)) +
  geom_line(linewidth = 1) +
  facet_grid(short_name_model ~ update) +
  theme_minimal() +
  theme(strip.text.y = element_text(angle = 0),
        legend.position = "none") +
  labs(x = "Date", y = "Nb of reservoir")
```

### Performance

```{r}
df_perf <- df_all %>%
  mutate(outcome = if_else(outcome < 10, 10, outcome),
         pred = if_else(pred < 10, 10, pred),
         hosp = if_else(hosp < 10, 10, hosp)) %>%
  group_by(outcomeDate, short_name_model, pmutQuant, pmutCat, lr_sigma, update) %>%
  summarise(outcome = unique(outcome),
            hosp = unique(hosp),
            pred = median(pred),
            .groups = "drop") %>%
  mutate(AE = abs(pred - outcome),
         RE = AE/outcome,
         baseline_AE = abs(hosp - outcome),
         AE_baseline = AE - baseline_AE,
         RE_baseline = AE/baseline_AE) %>%
  group_by(short_name_model, pmutQuant, pmutCat, lr_sigma, update) %>%
  summarise(sd_AE = sd(AE, na.rm = T),
            AE = mean(AE, na.rm = T),
            sd_AE_baseline = sd(AE_baseline, na.rm = T),
            AE_baseline = mean(AE_baseline, na.rm = T),
            sd_RE = sd(RE, na.rm = TRUE),
            RE = median(RE, na.rm = TRUE),
            sd_RE_baseline = sd(RE_baseline, na.rm = TRUE),
            RE_baseline = median(RE_baseline, na.rm = TRUE),
            .groups = "drop") %>%
  select(short_name_model, pmutQuant, pmutCat, lr_sigma, update, AE, sd_AE, AE_baseline, sd_AE_baseline, RE, sd_RE, RE_baseline, sd_RE_baseline)

df_perf %>%
  # knitr::kable(format = "latex",
  #              digits = 2)
  knitr::kable(digits = 2,
               caption = "Model performance") %>%
  kableExtra::kable_styling()
```

```{r tileperf}
df_perf |> 
  ggplot(mapping = aes(x = lr_sigma, y = pmutCat, fill = AE, label = round(AE, 2))) +
  geom_tile() +
  geom_text(color = "white") +
  facet_wrap(update ~ ., ncol = 1) +
  theme_minimal() +
  scale_x_log10(breaks = df_perf$lr_sigma |> unique()) +
  scale_y_log10(breaks = df_perf$pmutCat |> unique()) +
  scale_fill_gradient(low = "orange", high = "black") +
  labs(fill = "Mean absolute error",
       x = "Leaking rate sigma",
       y = "Categorical mutation probability")
```

```{r lineperf}
df_perf |> 
  mutate(pmutCat = as.factor(pmutCat),
         pmutCat = forcats::fct_rev(pmutCat)) |> 
  ggplot(mapping = aes(x = lr_sigma, y = AE, color = pmutCat, group = pmutCat)) +
  geom_point() +
  geom_line() +
  facet_wrap(update ~ .) +
  theme_minimal() +
  scale_color_manual(values = c("black", "#03045E", "#0077B6", "#00B4D8")) +
  scale_x_log10(breaks = df_perf$lr_sigma |> unique()) +
  labs(y = "Mean absolute error",
       x = "Leaking rate sigma",
       color = "P(mutation categorical genes)")
```

# Hyperparameters

```{r}
path_hp <- here::here("results/experience_1/hyperparameters/")
ls_files_full <- list.files(path_hp, full.names = TRUE, recursive = TRUE)
numeric_hp <- c("ridge",
                "spectral_radius",
                "leaking_rate",
                "input_scaling")

df_all_hp <- lapply(ls_files_full,
                    function(file_i) readr::read_csv(file_i, id = "model")) |> 
  bind_rows() |> 
  tibble::rowid_to_column(var = "genetic_id") |> 
  mutate(file_hp = gsub(x = file_hp, pattern = ".csv", replacement = ""),
         file_hp = if_else(grepl(x = file_hp,
                                 pattern = "GeneticSingleIs_GA_GAHPDEF"),
                           "2021-03-01",
                           file_hp),
         last_used_observation = as.Date(file_hp),
         model = gsub(model, pattern = ".*GeneticSingleIs_GA_GAHPDEF_", replacement = "")) |> 
  tidyr::separate_wider_regex(
    model,
    patterns = c("pmutQuant",
                 pmutQuant = "[0-9]+", 
                 "_pmutCat", 
                 pmutCat = "[0-9]+",
                 "_sigmahalv",
                 lr_sigma = "[0-9]+",
                 "_.*")) |> 
  mutate(across(.cols = c(pmutQuant, pmutCat, lr_sigma),
                .fns = ~ as.numeric(.x)/1000),
         short_name_model = paste0("PmutQuant = ",
                                   pmutQuant, " ; PmutCat = ",
                                   pmutCat, " ; lr sigma = ",
                                   lr_sigma)) |> 
  filter(last_used_observation < as.Date("2022-01-17"),
         value != 1000)

## get the best 40 by date
df_all_hp_best40 <- df_all_hp %>%
  group_by(short_name_model, last_used_observation) %>%
  slice_min(value, n = 40) |> 
  ungroup()
```

## Numeric hyperparameters

```{r fig.height=8, fig.cap="Sanity check leaking rate, variance of leaking rate of genetic individuals should increase with leaking rate mutation sigma"}
plot_sanity_numeric_hp <- df_all_hp |> 
  group_by(pmutCat, lr_sigma, last_used_observation) |> 
  summarise(var_lr = var(leaking_rate), .groups = "drop") |> 
  mutate(pmutCat = as.factor(pmutCat),
         last_used_observation = as.factor(last_used_observation)) |> 
  ggplot(mapping = aes(x = lr_sigma, y = var_lr, color = last_used_observation, shape = pmutCat)) +
  geom_point() +
  labs(x = "Leaking rate mutation sigma",
       y = "Variance of leaking rate") +
  scale_x_log10(breaks = unique(df_all_hp$lr_sigma)) +
  theme_minimal()
plot_sanity_numeric_hp
```


```{r fig.height=8, fig.cap="Numeric hyperparameter, density of all genetic individuals."}
plot_numeric_hp <- df_all_hp |> 
  select(pmutCat, lr_sigma, last_used_observation, all_of(numeric_hp)) |> 
  tidyr::pivot_longer(cols = numeric_hp, names_to = "hyperparameter") |> 
  mutate(pmutCat = as.factor(pmutCat),
         pmutCat = forcats::fct_rev(pmutCat),
         last_used_observation = as.factor(last_used_observation),
         last_used_observation = forcats::fct_rev(last_used_observation)) |> 
  ggplot(mapping = aes(x = value,
                       y = last_used_observation,
                       group = interaction(last_used_observation, hyperparameter),
                       fill = hyperparameter,
                       color = hyperparameter)) +
  ggridges::geom_density_ridges(alpha = 0.5) +
  facet_grid(pmutCat ~ lr_sigma, scales = "free_y", labeller = label_both, switch = "both") +
  scale_x_log10() +
  scale_fill_manual(values = c("#264653", "#2A9D8F", "#F4A261", "#E76F51")) +
  scale_color_manual(values = c("#264653", "#2A9D8F", "#F4A261", "#E76F51")) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(x = "Hyperparameter value",
       y = "Update Date")

plot_numeric_hp
```

```{r fig.height=8, fig.cap="Numeric hyperparameter, density of 40 best genetic individuals per hyperparameter update date."}
plot_best_numeric_hp <- df_all_hp_best40 |> 
  select(pmutCat, lr_sigma, last_used_observation, all_of(numeric_hp)) |> 
  tidyr::pivot_longer(cols = numeric_hp, names_to = "hyperparameter") |> 
  mutate(pmutCat = as.factor(pmutCat),
         pmutCat = forcats::fct_rev(pmutCat),
         last_used_observation = as.factor(last_used_observation),
         last_used_observation = forcats::fct_rev(last_used_observation)) |> 
  ggplot(mapping = aes(x = value,
                       y = last_used_observation,
                       group = interaction(last_used_observation, hyperparameter),
                       fill = hyperparameter,
                       color = hyperparameter)) +
  ggridges::geom_density_ridges(alpha = 0.5) +
  facet_grid(pmutCat ~ lr_sigma, scales = "free_y", labeller = label_both, switch = "both") +
  scale_x_log10() +
  scale_fill_manual(values = c("#264653", "#2A9D8F", "#F4A261", "#E76F51")) +
  scale_color_manual(values = c("#264653", "#2A9D8F", "#F4A261", "#E76F51")) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(x = "Hyperparameter value",
       y = "Update Date")

plot_best_numeric_hp
```

## Categorical hyperparameters

```{r}
df_all_hp_best40_qual <- df_all_hp_best40 |> 
  select(c(genetic_id, short_name_model, job_id, pmutCat, lr_sigma, last_used_observation, ends_with("_bin")))
```

```{r fig.height=8, fig.cap="Number of selected features among the best genetic individuals."}
df_all_hp_best40_qual |> 
  tidyr::pivot_longer(cols = ends_with("_bin")) |> 
  group_by(genetic_id, pmutCat, lr_sigma, last_used_observation) |> 
  summarise(n_features = sum(value == "y"), .groups = "drop") |> 
  mutate(last_used_observation = as.factor(last_used_observation),
         pmutCat = as.factor(pmutCat),
         pmutCat = forcats::fct_rev(pmutCat)) |> 
  ggplot(mapping = aes(color = pmutCat, y = n_features, x = lr_sigma, group = interaction(pmutCat, lr_sigma))) +
  geom_boxplot() +
  facet_grid(last_used_observation ~ .) +
  scale_color_manual(values = c("black", "#03045E", "#0077B6", "#00B4D8")) +
  scale_x_log10(breaks = unique(df_all_hp_best40_qual$lr_sigma)) +
  theme_minimal() +
  theme(strip.text.y = element_text(angle = 0)) +
  labs(x = "Leaking rate sigma mutation",
       y = "Number of selected features",
       color = "P(mutation categorical genes)")
```


<!-- ```{r factorialanalysis} -->
<!-- # Loading data -->
<!-- library(FactoMineR) -->
<!-- res.mca <- df_all_hp_best40_qual |>  -->
<!--   filter(last_used_observation == "2021-03-01") |>  -->
<!--   select(pmutCat, lr_sigma, ends_with("_bin")) |>  -->
<!--   mutate(across(.cols = c(pmutCat, lr_sigma), .fns = as.factor)) |>  -->
<!--   MCA(ncp = 200, -->
<!--       quali.sup = c("pmutCat", "lr_sigma"), -->
<!--       graph=FALSE) -->
<!-- res.hcpc <- HCPC(res.mca, graph = FALSE, nb.clust = -1, max = 100, min = 2) -->
<!-- res.hcpc$desc.ind -->
<!-- ``` -->

<!-- ```{r} -->
<!-- library(umap) -->

<!-- df_freq_selection <- df_all_hp_best40_qual |>  -->
<!--   tidyr::pivot_longer(cols = ends_with("_bin")) |>  -->
<!--   group_by(short_name_model,  pmutCat, lr_sigma, last_used_observation, name) |>  -->
<!--   summarise(value = mean(value == "y"), .groups = "drop") |>  -->
<!--   tidyr::pivot_wider() -->

<!-- umap_test <- umap(df_freq_selection |>  -->
<!--   select(ends_with("_bin"))) -->

<!-- umap_test$layout |>  -->
<!--   as.data.frame() |>  -->
<!--   bind_cols(df_freq_selection) |>  -->
<!--   mutate(pmutCat = as.factor(pmutCat), -->
<!--          lr_sigma = as.factor(lr_sigma)) |>  -->
<!--   ggplot(mapping = aes(x = V1, y = V2, color = lr_sigma, shape = pmutCat)) + -->
<!--   geom_point() -->
<!-- ``` -->


```{r freqselectionfeatures, fig.height=8}
df_freq_selection <- df_all_hp_best40_qual |>  
  tidyr::pivot_longer(cols = ends_with("_bin")) |>  
  group_by(short_name_model,  pmutCat, lr_sigma, last_used_observation, name) |>  
  summarise(value = mean(value == "y"), .groups = "drop") |> 
  mutate(last_used_observation = as.factor(last_used_observation))

ggplot(df_freq_selection,
       mapping = aes(x = value,
                     fill = last_used_observation,
                     color = last_used_observation,
                     y = lr_sigma,
                     group = interaction(lr_sigma, last_used_observation))) +
  ggridges::geom_density_ridges(alpha = 0.2) +
  facet_grid(. ~ pmutCat, labeller = label_both) +
  scale_fill_viridis_d() +
  scale_color_viridis_d() +
  scale_y_log10() +
  labs(y = "Leaking rate sigma mutation",
       x = "Frequency of feature selection",
       fill = "Date update",
       color = "Date update") +
  theme_minimal() +
  xlim(0,1)
```

