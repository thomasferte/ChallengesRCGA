---
title: "High dimension reservoir"
format: gfm
editor: visual
echo: false
message: false
warning: false
prefer-html: true
---

```{r}
########## LOAD PACKAGES #####
library(dplyr)
library(parallel)
library(ggplot2)
library(cowplot)
source(file = here::here("script/FctCleanFeaturesName.R"))
set.seed(1)
```

# Introduction

# Methods

## Use case

## Reservoir computing

## Genetic algorithm

## Experimental setup

### Metaparameter exploration

Choice of hyperparameters :

sigma leaking rate : because depending on setting, convergence to
different leaking rate seem to occur. Furthermore, low leaking rate
seemed to achieve better performance

pmutCat : because hyperparameter monthly update seem not to improve
performance which is counterintuitive as important features should
evolve in this context of non stationary time series.

Grid :

-   sigma leaking rate = c(0.016, 0.04, 0.1, 0.25)
-   pmutCat = c(0.1, 0.2, 0.4, 0.8)

# Results

## Data presentation

# Setting

Figure above describes the evolution of 4 features (RT-PCR, positive
RT-PCR, IPTCC and hospitalization) and of the outcome. We observe that
the relationship between explanatory features and the outcome evolves
over time making this problem complex.

```{r fig.cap="Description of the outcome and 4 chosen features"}
df_data <- read.csv(here::here("../high_dimension_reservoir/data_obfuscated/20220117.csv"))
########## NB FEATURES #####
nb_features <- read.csv(here::here("../high_dimension_reservoir/data_obfuscated/20220117.csv")) %>%
  select(-outcome, -outcomeDate, -START_DATE) %>%
  ncol()
########## Understand gaps #####
df_data %>%
  select(P_TOUS_AGES, TESTED_TOUS_AGES, IPTCC.mean, outcome, outcomeDate, hosp) %>%
  mutate(outcomeDate = as.Date(outcomeDate)) %>%
  tidyr::pivot_longer(cols = -outcomeDate) %>%
  mutate(name = factor(name,
                       levels = c("outcome",
                                  "hosp",
                                  "P_TOUS_AGES",
                                  "TESTED_TOUS_AGES",
                                  "IPTCC.mean"),
                       labels = c("Outcome",
                                  "Hospitalization",
                                  "Positive RT-PCR",
                                  "RT-PCR",
                                  "IPTCC (weather)"))) |> 
  ggplot(mapping = aes(x = outcomeDate, y = value)) +
  geom_line() +
  facet_grid(name ~ ., scales = "free_y") +
  scale_x_date(date_breaks = "months") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90),
        strip.text.y = element_text(angle = 0)) +
  labs(x = "Date")
```

## Forecast

```{r}
### 1) Load data
path_predictions <- here::here("results/experience_1/prediction")
ls_files <- list.files(path_predictions)
ls_files_full <- list.files(path_predictions, full.names = TRUE)
names(ls_files_full) <- gsub(ls_files, pattern = "_combined.csv", replacement = "")

df_all_temp <- lapply(ls_files_full, read.csv) %>%
  bind_rows(.id = "model") %>%
  mutate(outcomeDate = as.Date(outcomeDate),
         model = factor(model)) %>%
  group_by(outcomeDate, model) %>%
  filter(outcomeDate >= as.Date("2021-03-15"))

df_all <- df_all_temp %>% slice_min(hp_date) %>% mutate(update = "No") %>%
  bind_rows(df_all_temp %>% slice_max(hp_date) %>% mutate(update = "Yes")) %>%
  mutate(model = if_else(grepl(model, pattern = "_v2$|_v3$"),
                         false = paste0(model, "_v1"),
                         true = model)) |> 
  ungroup() |> 
  tidyr::separate_wider_regex(
    model,
    patterns = c("GeneticSingleIs_GA_GAHPDEF_pmutQuant", 
                 pmutQuant = "[0-9]+", 
                 "_pmutCat", 
                 pmutCat = "[0-9]+",
                 "_sigmahalv",
                 lr_sigma = "[0-9]+",
                 "_v",
                 iter = "[0-9]+")) |> 
  mutate(across(.cols = c(pmutQuant, pmutCat, lr_sigma),
                .fns = ~ as.numeric(.x)/1000),
         short_name_model = paste0("PmutQuant = ", pmutQuant, " ; PmutCat = ", pmutCat, " ; lr sigma = ", lr_sigma),
         update = factor(update, levels = c("No", "Yes"), labels = c("No monthly update", "Monthly update")))
```

### Sanity check

First, we check that there is 40 reservoir prediction for each day of
the prediction for each scenario. We observe that there is indeed a
forecast for each day. Some days have less than 40 reservoirs but the
minimum is 37 which seems acceptable.

```{r sanitycheck, fig.height=12, fig.cap="Number of reservoir per day for prediction"}

df_grid <- expand.grid(iter = unique(df_all$iter),
                       update = unique(df_all$update),
                       short_name_model = unique(df_all$short_name_model),
                       outcomeDate = unique(df_all$outcomeDate))

df_plot_sanity <- df_all |> 
  group_by(iter, update, short_name_model, outcomeDate) |> 
  summarise(n = n(), .groups = "drop") |> 
  full_join(df_grid) |> 
  mutate(n = if_else(is.na(n), 0, n))

df_plot_sanity |> 
  ggplot(mapping = aes(x = outcomeDate, y = n, color = iter)) +
  geom_point(linewidth = 1) +
  facet_grid(short_name_model ~ update) +
  theme_minimal() +
  theme(strip.text.y = element_text(angle = 0)) +
  labs(x = "Date", y = "Nb of reservoir")
```

### Performance

```{r}
df_perf1 <- df_all %>%
  mutate(outcome = if_else(outcome < 10, 10, outcome),
         pred = if_else(pred < 10, 10, pred),
         hosp = if_else(hosp < 10, 10, hosp)) %>%
  group_by(iter, outcomeDate, short_name_model, pmutQuant, pmutCat, lr_sigma, update) %>%
  summarise(outcome = unique(outcome),
            hosp = unique(hosp),
            pred = median(pred),
            .groups = "drop") %>%
  mutate(AE = abs(pred - outcome),
         RE = AE/outcome,
         baseline_AE = abs(hosp - outcome),
         AE_baseline = AE - baseline_AE,
         RE_baseline = AE/baseline_AE) %>%
  group_by(iter, short_name_model, pmutQuant, pmutCat, lr_sigma, update) %>%
  summarise(sd_AE = sd(AE, na.rm = T),
            AE = mean(AE, na.rm = T),
            sd_AE_baseline = sd(AE_baseline, na.rm = T),
            AE_baseline = mean(AE_baseline, na.rm = T),
            sd_RE = sd(RE, na.rm = TRUE),
            RE = median(RE, na.rm = TRUE),
            sd_RE_baseline = sd(RE_baseline, na.rm = TRUE),
            RE_baseline = median(RE_baseline, na.rm = TRUE),
            .groups = "drop") %>%
  select(iter, short_name_model, pmutQuant, pmutCat, lr_sigma, update, AE, sd_AE, AE_baseline, sd_AE_baseline, RE, sd_RE, RE_baseline, sd_RE_baseline)

df_perf <- df_perf1 |> 
  group_by(short_name_model, pmutQuant, pmutCat, lr_sigma, update) |> 
  summarise(across(.cols = c(AE, AE_baseline, RE, RE_baseline),
                   .fns = list(median = median,
                               min = min,
                               max = max)))

# df_perf %>%
#   mutate(across(c("AE", "RE", "AE_baseline", "RE_baseline", starts_with("sd_")),
#                 ~ round(.x, 2))) |> 
#   mutate(update = update,
#          pmutCat = pmutCat,
#          lr_sigma = lr_sigma,
#          MAE = paste0(AE, "(\u00B1", sd_AE, ")"),
#          MRE = paste0(RE, "(\u00B1", sd_RE, ")"),
#          MAEB = paste0(AE_baseline, "(\u00B1", sd_AE_baseline, ")"),
#          MREB = paste0(RE_baseline, "(\u00B1", sd_RE_baseline, ")"),
#          .keep = "none") |> 
#   # knitr::kable(format = "latex", booktabs = TRUE)
#   knitr::kable(digits = 2,
#                caption = "Model performance") %>%
#   kableExtra::kable_styling()

df_perf %>%
  mutate(across(.cols = c(ends_with("_median"), ends_with("_min"), ends_with("_max")),
                ~ round(.x, 2))) |>
  mutate(update = update,
         pmutCat = pmutCat,
         lr_sigma = lr_sigma,
         MAE = paste0(AE_median, "(", AE_min, " ; ", AE_max, ")"),
         MRE = paste0(RE_median, "(", RE_min, " ; ", RE_max, ")"),
         MAEB = paste0(AE_baseline_median, "(", AE_baseline_min, " ; ", AE_baseline_max, ")"),
         MREB = paste0(RE_baseline_median, "(", RE_baseline_min, " ; ", RE_baseline_max, ")"),
         .keep = "none") |>
  # knitr::kable(format = "latex", booktabs = TRUE)
  knitr::kable(digits = 2,
               caption = "Model performance") %>%
  kableExtra::kable_styling()

# df_perf %>%
#   mutate(across(c("AE", "RE", "AE_baseline", "RE_baseline", starts_with("sd_")),
#                 ~ round(.x, 2))) |> 
#   mutate(update = update,
#          pmutCat = pmutCat,
#          lr_sigma = lr_sigma,
#          MAE = paste0(AE, "(\u00B1", sd_AE, ")"),
#          MRE = paste0(RE, "(\u00B1", sd_RE, ")"),
#          .keep = "none") |> 
#   tidyr::pivot_wider(names_from = update,
#                      values_from = c("MAE", "MRE")) |> 
#   janitor::clean_names() |> 
#   select(pmut_cat, lr_sigma,
#          mae_no_monthly_update, mre_no_monthly_update,
#          mae_monthly_update, mre_monthly_update) |> 
#   knitr::kable(format = "latex", booktabs = TRUE) |> 
#   knitr::kable(digits = 2,
#                caption = "Model performance") %>%
#   kableExtra::kable_styling()


```

```{r tileperf}
df_perf |> 
  ggplot(mapping = aes(x = lr_sigma, y = pmutCat, fill = AE_median, label = round(AE_median, 2))) +
  geom_tile() +
  geom_text(color = "white") +
  facet_wrap(update ~ ., ncol = 1) +
  theme_minimal() +
  scale_x_log10(breaks = df_perf$lr_sigma |> unique()) +
  scale_y_log10(breaks = df_perf$pmutCat |> unique()) +
  scale_fill_gradient(low = "orange", high = "black") +
  labs(fill = "Mean absolute error",
       x = "Leaking rate sigma",
       y = "Categorical mutation probability")
```

```{r lineperf}
graph_perf <- df_perf |> 
  mutate(pmutCat = as.factor(pmutCat),
         pmutCat = forcats::fct_rev(pmutCat)) |> 
  ggplot(mapping = aes(x = lr_sigma, y = AE_median, ymin = AE_min, ymax = AE_max, color = pmutCat, group = pmutCat)) +
  geom_point(position = position_dodge(width = .1)) +
  geom_errorbar(position = position_dodge(width = .1), width = 0) +
  geom_line(position = position_dodge(width = .1)) +
  facet_wrap(update ~ .) +
  theme_minimal() +
  scale_color_manual(values = c("black", "#03045E", "#0077B6", "#00B4D8")) +
  scale_x_log10(breaks = df_perf$lr_sigma |> unique()) +
  labs(y = "Mean absolute error",
       x = "Leaking rate sigma",
       color = "P(mutation categorical genes)")

graph_perf
ggsave(filename = here::here("figures/graph_perf.pdf"), height = 3, width = 10)
```

# Hyperparameters

```{r}
path_hp <- here::here("results/experience_1/hyperparameters/")
ls_files_full <- list.files(path_hp, full.names = TRUE, recursive = TRUE)
ls_files_full <- grep(ls_files_full, pattern = "_v2_|_v3_", invert = TRUE, value = TRUE)
numeric_hp <- c("ridge",
                "spectral_radius",
                "leaking_rate",
                "input_scaling")

df_all_hp <- lapply(ls_files_full,
                    function(file_i) readr::read_csv(file_i, id = "model") |> 
                      mutate(across(.cols = c(spectral_radius, value),
                                    .fns = as.numeric))) |> 
  bind_rows() |> 
  tibble::rowid_to_column(var = "genetic_id") |> 
  mutate(file_hp = gsub(x = file_hp, pattern = ".csv", replacement = ""),
         file_hp = if_else(grepl(x = file_hp,
                                 pattern = "GeneticSingleIs_GA_GAHPDEF"),
                           "2021-03-01",
                           file_hp),
         last_used_observation = as.Date(file_hp),
         model = gsub(model, pattern = ".*GeneticSingleIs_GA_GAHPDEF_", replacement = ""),
         model = gsub(model, pattern = "_hyperparameters.csv", replacement = "")) |> 
  tidyr::separate_wider_regex(
    model,
    patterns = c("pmutQuant",
                 pmutQuant = "[0-9]+", 
                 "_pmutCat", 
                 pmutCat = "[0-9]+",
                 "_sigmahalv",
                 lr_sigma = "[0-9]+")) |> 
  mutate(across(.cols = c(pmutQuant, pmutCat, lr_sigma),
                .fns = ~ as.numeric(.x)/1000),
         short_name_model = paste0("PmutQuant = ",
                                   pmutQuant, " ; PmutCat = ",
                                   pmutCat, " ; lr sigma = ",
                                   lr_sigma)) |> 
  filter(last_used_observation < as.Date("2022-01-17"),
         value != 1000)

## get the best 40 by date
df_all_hp_best40 <- df_all_hp %>%
  group_by(short_name_model, last_used_observation) %>%
  slice_min(value, n = 40) |> 
  ungroup()
```

## Numeric hyperparameters

### Sanity check

```{r fig.height=5, fig.cap="Sanity check leaking rate, variance of leaking rate of genetic individuals should increase with leaking rate mutation sigma"}
plot_sanity_numeric_hp <- df_all_hp |> 
  group_by(pmutCat, lr_sigma, last_used_observation) |> 
  summarise(var_log_lr = var(log10(leaking_rate)), .groups = "drop") |> 
  mutate(pmutCat = as.factor(pmutCat),
         last_used_observation = as.factor(last_used_observation)) |> 
  ggplot(mapping = aes(x = lr_sigma, y = var_log_lr, color = pmutCat)) +
  geom_point() +
  facet_wrap(last_used_observation ~ ., scales = "free_y") +
  labs(x = "Leaking rate mutation sigma",
       y = "Variance of leaking rate") +
  scale_x_log10(breaks = unique(df_all_hp$lr_sigma)) +
  theme_minimal()
plot_sanity_numeric_hp
```

### Performance on train set

```{r fig.height=10, fig.width=6, fig.cap="Performance on the train set"}
plot_best_numeric_hp_values_bylr_sigma <- df_all_hp_best40 |> 
  group_by(short_name_model, pmutCat, lr_sigma, last_used_observation) |> 
  summarise(median = round(median(value),2),
            Q1 = round(quantile(value, .25),2),
            Q3 = round(quantile(value, .75), 2)) |> 
  mutate(pmutCat = as.factor(pmutCat),
         pmutCat = forcats::fct_rev(pmutCat),
         last_used_observation = as.factor(last_used_observation)) |> 
  ggplot(mapping = aes(x = last_used_observation, y = median, ymin = Q1, ymax = Q3, color = pmutCat, group = pmutCat)) +
  geom_point() +
  geom_errorbar(width = 0) +
  geom_line() +
  facet_wrap(lr_sigma ~ ., labeller = label_both, scales = "free_y") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "bottom") +
  guides(color = guide_legend(ncol = 2)) +
  scale_color_manual(values = c("black", "#03045E", "#0077B6", "#00B4D8")) +
  labs(y = "Mean absolute error",
       x = "Date",
       color = "P(mutation categorical genes)")

plot_best_numeric_hp_values_bypmutcat <- df_all_hp_best40 |> 
  group_by(short_name_model, pmutCat, lr_sigma, last_used_observation) |> 
  summarise(median = round(median(value),2),
            Q1 = round(quantile(value, .25),2),
            Q3 = round(quantile(value, .75), 2)) |> 
  mutate(lr_sigma = as.factor(lr_sigma),
         lr_sigma = forcats::fct_rev(lr_sigma),
         last_used_observation = as.factor(last_used_observation)) |> 
  ggplot(mapping = aes(x = last_used_observation, y = median, ymin = Q1, ymax = Q3, color = lr_sigma, group = lr_sigma)) +
  geom_point() +
  geom_errorbar(width = 0) +
  geom_line() +
  facet_wrap(pmutCat ~ ., labeller = label_both, scales = "free_y") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "bottom") +
  guides(color = guide_legend(ncol = 2)) +
  scale_color_manual(values = c("black", "#6A040F", "#D00000", "#E85D04")) +
  labs(y = "Mean absolute error",
       x = "Date",
       color = "sigma(leaking rate)")


plot_best_numeric_hp_values.pdf <- ggpubr::ggarrange(plot_best_numeric_hp_values_bylr_sigma, plot_best_numeric_hp_values_bypmutcat)

plot_best_numeric_hp_values.pdf

ggsave(plot = plot_best_numeric_hp_values.pdf,
       filename = here::here("figures/plot_best_numeric_hp_values.pdf"),
       height = 5, width = 10)
```

```{r}
plot_best_numeric_hp_values.pdf <- ggpubr::ggarrange(plot_best_numeric_hp_values_bylr_sigma, plot_best_numeric_hp_values_bypmutcat)

plot_perf_train_and_test <- ggdraw() +
  draw_plot(plot_best_numeric_hp_values_bylr_sigma +
              scale_x_discrete(breaks = c("2021-03-01",
                                          "2021-05-02",
                                          "2021-07-01",
                                          "2021-09-01",
                                          "2021-11-02",
                                          "2022-01-01")),
            x = 0, y = .35, width = .5, height = .65) +
  draw_plot(plot_best_numeric_hp_values_bypmutcat +
              scale_x_discrete(breaks = c("2021-03-01",
                                          "2021-05-02",
                                          "2021-07-01",
                                          "2021-09-01",
                                          "2021-11-02",
                                          "2022-01-01")),
            x = .5, y = .35, width = .5, height = .65) +
  draw_plot(graph_perf, x = 0, y = 0, width = 1, height = .35) +
  draw_plot_label(label = c("A", "B", "C"), size = 15,
                  x = c(0, .5, 0), y = c(1, 1, .4))

plot_perf_train_and_test

ggsave(plot = plot_perf_train_and_test,
       filename = here::here("figures/plot_perf_train_and_test.pdf"),
       height = 12, width = 8, useDingbats = TRUE)

```

### Hyperparameter evolution

```{r fig.height=8, fig.cap="Numeric hyperparameter, density of 40 best genetic individuals per hyperparameter update date."}
plot_best_numeric_hp <- df_all_hp_best40 |> 
  select(pmutCat, lr_sigma, last_used_observation, all_of(numeric_hp)) |> 
  tidyr::pivot_longer(cols = numeric_hp, names_to = "hyperparameter") |> 
  mutate(pmutCat = as.factor(pmutCat),
         pmutCat = forcats::fct_rev(pmutCat),
         last_used_observation = as.factor(last_used_observation),
         last_used_observation = forcats::fct_rev(last_used_observation)) |> 
  ggplot(mapping = aes(x = value,
                       y = last_used_observation,
                       group = interaction(last_used_observation, hyperparameter),
                       fill = hyperparameter,
                       color = hyperparameter)) +
  ggridges::geom_density_ridges(alpha = 0.5) +
  facet_grid(pmutCat ~ lr_sigma, scales = "free_y", labeller = label_both, switch = "both") +
  scale_x_log10(breaks = c(1e-10, 1e-5, 1, 1e5)) +
  scale_fill_manual(values = c("#264653", "#2A9D8F", "#F4A261", "#E76F51")) +
  scale_color_manual(values = c("#264653", "#2A9D8F", "#F4A261", "#E76F51")) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(x = "Hyperparameter value",
       y = "Update Date")

plot_best_numeric_hp
ggsave(plot_best_numeric_hp, file = here::here("figures/plot_best_numeric_hp.pdf"),
       width = 8,
       height = 8,
       useDingbats = TRUE)
```

```{r}
df_all_hp_best40 |> 
  select(pmutCat, lr_sigma, last_used_observation, all_of(numeric_hp)) |> 
  tidyr::pivot_longer(cols = numeric_hp, names_to = "hyperparameter") |> 
  mutate(pmutCat = as.factor(pmutCat),
         lr_sigma = as.factor(lr_sigma),
         pmutCat = forcats::fct_rev(pmutCat),
         last_used_observation = as.factor(last_used_observation),
         last_used_observation = forcats::fct_rev(last_used_observation)) |> 
  ggplot(mapping = aes(y = value,
                       x = lr_sigma,
                       color = pmutCat)) +
  geom_point(position = ggplot2::position_jitterdodge(dodge.width = 0.7, jitter.width = 0.2)) +
  # scale_x_log10() +
  scale_y_log10() +
  facet_wrap(hyperparameter ~ ., scales = "free_y") +
  theme_minimal() +
  theme(legend.position = "bottom")
```

```{r fig.height=6, fig.cap="Two by two hyperparameter dependency."}
# ls_plots <- list(c("leaking_rate", "spectral_radius"),
#                  c("leaking_rate", "ridge"),
#                  c("leaking_rate", "input_scaling"),
#                  c("spectral_radius", "ridge"),
#                  c("spectral_radius", "input_scaling"),
#                  c("ridge", "input_scaling"))
# 
# ls_plot_22 <- lapply(ls_plots,
#        FUN = function(vec_coord){
#          plot_i <- ggplot(df_all_hp_best40,
#                           mapping = aes(x = .data[[vec_coord[1]]], y= .data[[vec_coord[2]]],
#                                         color = leaking_rate)) +
#            geom_point(alpha = .25) +
#            scale_x_log10(breaks = c(1e-4, 1e-2, 1, 1e2, 1e4, 1e6),
#                          labels = function(x) format(x, scientific = TRUE)) +
#            scale_y_log10(breaks = c(1e-4, 1e-2, 1, 1e2, 1e4, 1e6),
#                          labels = function(x) format(x, scientific = TRUE)) +
#            scale_color_gradient(low = "red",
#                                 high = "#2A9D8F",
#                                 trans = "log",
#                                 breaks = c(1, 5*1e-3, 1e-5)) +
#            theme_minimal()
#          return(plot_i)
#        })
# 
# plot_22 <- ggpubr::ggarrange(plotlist = ls_plot_22, common.legend = TRUE)


plot_22 <- df_all_hp_best40 |> 
  select(all_of(numeric_hp)) |> 
  tidyr::pivot_longer(cols = c("ridge", "input_scaling", "spectral_radius")) |> 
  ggplot(mapping = aes(x = leaking_rate, y= value,
                       color = leaking_rate)) +
  geom_point(alpha = .25) +
  scale_x_log10(breaks = c(1e-4, 1e-2, 1, 1e2, 1e4, 1e6),
                labels = function(x) format(x, scientific = TRUE)) +
  scale_y_log10(labels = function(x) format(x, scientific = TRUE)) +
  scale_color_gradient(low = "red",
                       high = "#2A9D8F",
                       trans = "log",
                       breaks = c(1, 5*1e-3, 1e-5)) +
  facet_grid(name ~ ., scales = "free_y") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(y = "Hyperparameter value")

plot_22
ggsave(plot_22, file = here::here("figures/plot_22.pdf"),
       width = 3,
       height = 4,
       useDingbats = TRUE)
```

### Leaking rate influence

```{r}
plot_lr_influence_train_set <- df_all_hp_best40 |> 
 mutate(lr_inf_2 = if_else(leaking_rate < 1e-2,
                            "leaking_rate < 1e-2",
                            "leaking_rate >= 1e-2"),
        file_hp = as.factor(file_hp),
        file_hp = forcats::fct_rev(file_hp)) |> 
  ggplot(mapping = aes(x = value, color = lr_inf_2, fill = lr_inf_2, y = file_hp)) +
  ggridges::geom_density_ridges(alpha = 0.5) +
  scale_color_manual(values = c("red", "#2A9D8F")) +
  scale_fill_manual(values = c("red", "#2A9D8F")) +
  theme_minimal() +
  labs(color = "", fill = "",
       x = "MAE on train set",
       y = "Update date") +
  theme(legend.position = "bottom")

plot_lr_influence_train_set
ggsave(plot_lr_influence_train_set, file = here::here("figures/plot_lr_influence_train_set.pdf"),
       width = 4.5,
       height = 3.5,
       useDingbats = TRUE)
```

```{r}
df_lr <- df_all_hp |> 
  select(job_id, file_hp, leaking_rate) |> 
  distinct() |> 
  mutate(trial = paste0("trial_", job_id, "_train365"),
         hp_date = as.character(as.Date(file_hp) + 14),
         .keep = "unused")

df_all_lr <- df_all |> 
  filter(iter == 1) |> 
  left_join(df_lr,
            by = c("trial", "hp_date")) |> 
  select(trial, hp_date, leaking_rate, outcomeDate, short_name_model, pmutQuant, pmutCat, lr_sigma, update, pred, outcome, hosp) |> 
  mutate(lr_inf_2 = if_else(leaking_rate < 1e-2,
                            "leaking_rate < 1e-2",
                            "leaking_rate >= 1e-2"),
         outcomeDateYM = format(outcomeDate, "%Y-%m"))
```

```{r}
df_perf_lr <- df_all_lr %>%
  mutate(outcome = if_else(outcome < 10, 10, outcome),
         pred = if_else(pred < 10, 10, pred),
         hosp = if_else(hosp < 10, 10, hosp)) %>%
  group_by(lr_inf_2, outcomeDate, update) %>%
  summarise(outcome = unique(outcome),
            hosp = unique(hosp),
            pred = median(pred),
            .groups = "drop") %>%
  mutate(AE = abs(pred - outcome),
         RE = AE/outcome,
         baseline_AE = abs(hosp - outcome),
         AE_baseline = AE - baseline_AE,
         RE_baseline = AE/baseline_AE) %>%
  group_by(lr_inf_2, update) %>%
  summarise(sd_AE = sd(AE, na.rm = T),
            AE = mean(AE, na.rm = T),
            sd_AE_baseline = sd(AE_baseline, na.rm = T),
            AE_baseline = mean(AE_baseline, na.rm = T),
            sd_RE = sd(RE, na.rm = TRUE),
            RE = median(RE, na.rm = TRUE),
            sd_RE_baseline = sd(RE_baseline, na.rm = TRUE),
            RE_baseline = median(RE_baseline, na.rm = TRUE),
            .groups = "drop") %>%
  select(lr_inf_2, update, AE, sd_AE, AE_baseline, sd_AE_baseline, RE, sd_RE, RE_baseline, sd_RE_baseline)

df_perf_lr %>%
  mutate(across(c("AE", "RE", "AE_baseline", "RE_baseline", starts_with("sd_")),
                ~ round(.x, 2))) |> 
  mutate(lr_inf_2 = lr_inf_2,
         update = update,
         MAE = paste0(AE, "(\u00B1", sd_AE, ")"),
         MRE = paste0(RE, "(\u00B1", sd_RE, ")"),
         MAEB = paste0(AE_baseline, "(\u00B1", sd_AE_baseline, ")"),
         MREB = paste0(RE_baseline, "(\u00B1", sd_RE_baseline, ")"),
         .keep = "none") |> 
  # knitr::kable(format = "latex", booktabs = TRUE)
  knitr::kable(digits = 2,
               caption = "Model performance") %>%
  kableExtra::kable_styling()
```

```{r}
df_perf_lr_by_month <- df_all_lr %>%
  mutate(outcome = if_else(outcome < 10, 10, outcome),
         pred = if_else(pred < 10, 10, pred),
         hosp = if_else(hosp < 10, 10, hosp)) %>%
  group_by(lr_inf_2, outcomeDate, outcomeDateYM, update) %>%
  summarise(outcome = unique(outcome),
            hosp = unique(hosp),
            pred = median(pred),
            .groups = "drop") %>%
  mutate(AE = abs(pred - outcome),
         RE = AE/outcome,
         baseline_AE = abs(hosp - outcome),
         AE_baseline = AE - baseline_AE,
         RE_baseline = AE/baseline_AE) %>%
  group_by(outcomeDateYM, lr_inf_2, update) %>%
  summarise(sd_AE = sd(AE, na.rm = T),
            AE = mean(AE, na.rm = T),
            sd_AE_baseline = sd(AE_baseline, na.rm = T),
            AE_baseline = mean(AE_baseline, na.rm = T),
            sd_RE = sd(RE, na.rm = TRUE),
            RE = median(RE, na.rm = TRUE),
            sd_RE_baseline = sd(RE_baseline, na.rm = TRUE),
            RE_baseline = median(RE_baseline, na.rm = TRUE),
            .groups = "drop") %>%
  select(outcomeDateYM, lr_inf_2, update, AE, sd_AE, AE_baseline, sd_AE_baseline, RE, sd_RE, RE_baseline, sd_RE_baseline)

plot_lr_influence_test_set <- ggplot(df_perf_lr_by_month, mapping = aes(x = outcomeDateYM, y = AE,
                                                                        color = lr_inf_2, group = interaction(lr_inf_2, update),
                                                                        linetype = update,
                                                                        shape = update)) +
  geom_point() +
  geom_line() +
  scale_color_manual(values = c("red", "#2A9D8F")) +
  labs(x = "Date",
       y = "MAE on test set",
       color = "",
       linetype = "",
       shape = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "bottom",
        legend.box="vertical", legend.margin=margin())

plot_lr_influence_test_set
ggsave(plot_lr_influence_test_set, file = here::here("figures/plot_lr_influence_test_set.pdf"),
       width = 4.5,
       height = 3.5,
       useDingbats = TRUE)
```

```{r fig.height=6, fig.cap="Leaking rate bimodal influence."}
plot_influence_lr <- ggdraw() +
  draw_plot(plot_22, x = 0, y = 0, width = .3, height = 1) +
  draw_plot(plot_lr_influence_train_set, x = .35, y = .5, width = .6, height = .5) +
  draw_plot(plot_lr_influence_test_set, x = .35, y = 0, width = .6, height = .5) +
  draw_plot_label(label = c("A", "B", "C"), size = 15,
                  x = c(0, .3, .3), y = c(1, 1, .5))

plot_influence_lr <- ggdraw() +
  draw_plot(plot_22, x = 0, y = 0, width = .33, height = 1) +
  draw_plot(plot_lr_influence_train_set + guides(fill=guide_legend(nrow=2),
                                                 color=guide_legend(nrow=2)), x = .33, y = 0, width = .33, height = 1) +
  draw_plot(plot_lr_influence_test_set + guides(linetype=guide_legend(nrow=2),
                                                shape=guide_legend(nrow=2),
                                                color=guide_legend(nrow=2)), x = .66, y = 0, width = .33, height = 1) +
  draw_plot_label(label = c("A", "B", "C"), size = 15,
                  x = c(0, .33, .66), y = c(1, 1, 1))

plot_influence_lr

ggsave(plot = plot_influence_lr,
       filename = here::here("figures/plot_influence_lr.pdf"),
       height = 4, width = 7, useDingbats = TRUE)
```

## Categorical hyperparameters

```{r fig.height=8, fig.cap="Number of selected features among the best genetic individuals."}
df_all_hp_best40_qual <- df_all_hp |> 
  select(genetic_id, pmutCat, lr_sigma, last_used_observation, ends_with("_bin"))

temp <- df_all_hp_best40_qual |> 
  tidyr::pivot_longer(cols = ends_with("_bin")) |> 
  group_by(genetic_id, pmutCat, lr_sigma, last_used_observation) |> 
  summarise(n_features = sum(value == "y"), .groups = "drop") |> 
  mutate(last_used_observation = as.factor(last_used_observation),
         pmutCat = as.factor(pmutCat),
         pmutCat = forcats::fct_rev(pmutCat)) |> 
  group_by(pmutCat, lr_sigma, last_used_observation) |> 
  summarise(median = median(n_features),
            q1 = quantile(n_features, .25),
            q3 = quantile(n_features, .75),
            .groups = "drop")

plot_nb_features <- temp |> 
  ggplot(mapping = aes(color = pmutCat,
                       y = median,
                       ymin = q1,
                       ymax = q3,
                       x = last_used_observation,
                       group = pmutCat)) +
  geom_errorbar(width = 0, position = position_dodge(width=.5)) +
  geom_point(position = position_dodge(width=.5)) +
  geom_line(position = position_dodge(width=.5)) +
  facet_grid(lr_sigma ~ ., labeller = label_both) +
  scale_color_manual(values = c("black", "#03045E", "#0077B6", "#00B4D8")) +
  scale_y_continuous(breaks = seq(0,400, by =20)) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "Date",
       y = "Number of selected features",
       color = "P(mutation categorical genes)")

plot_nb_features

ggsave(plot_nb_features, file = here::here("figures/plot_nb_features.pdf"),
       height = 6, width = 6)
```

```{r freqselectionfeatures, fig.height=8}
df_freq_selection <- df_all_hp_best40_qual |>  
  tidyr::pivot_longer(cols = ends_with("_bin")) |>  
  group_by(pmutCat, lr_sigma, last_used_observation, name) |>  
  summarise(value = mean(value == "y"), .groups = "drop") |> 
  mutate(last_used_observation = as.factor(last_used_observation))

plot_distribution_feature_selection <- ggplot(df_freq_selection,
       mapping = aes(x = value,
                     fill = last_used_observation,
                     color = last_used_observation,
                     y = lr_sigma,
                     group = interaction(lr_sigma, last_used_observation))) +
  ggridges::geom_density_ridges(alpha = 0.2) +
  geom_vline(xintercept = .5, linetype = 2, color = "darkgrey") +
  facet_grid(. ~ pmutCat, labeller = label_both) +
  scale_fill_viridis_d() +
  scale_color_viridis_d() +
  scale_y_log10(breaks = unique(df_all_hp_best40_qual$lr_sigma)) +
  scale_x_continuous(limits = c(0,1),
                     breaks = c(0, .5, 1)) +
  labs(y = "Leaking rate sigma mutation",
       x = "Frequency of feature selection",
       fill = "Date update",
       color = "Date update") +
  theme_minimal()

plot_distribution_feature_selection

ggsave(plot_distribution_feature_selection,
       file = here::here("figures/plot_distribution_feature_selection.pdf"),
       height = 6,
       width = 8)
```

```{r}
plot_cat_features <- ggdraw() +
  draw_plot(plot_best_numeric_hp +
              theme(legend.position = "right"),
            x = 0, y = .45, width = 1, height = .55) +
  draw_plot(plot_nb_features + theme(legend.position = "bottom") +
              guides(color = guide_legend(ncol = 1)),
            x = 0, y = 0, width = .4, height = .45) +
  draw_plot(plot_distribution_feature_selection +
              theme(legend.position = "bottom") +
              guides(fill = guide_legend(ncol = 2)),
            x = .4, y = 0, width = .6, height = .45) +
  draw_plot_label(label = c("A", "B", "C"), size = 15,
                  x = c(0, 0, .4), y = c(1, .45, .45))

plot_cat_features

ggsave(plot = plot_cat_features,
       filename = here::here("figures/plot_cat_features.pdf"),
       height = 12, width = 8, useDingbats = TRUE)
```
