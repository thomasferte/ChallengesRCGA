---
title: "High dimension reservoir"
format: gfm
editor: visual
echo: false
message: false
warning: false
prefer-html: true
---

```{r}
########## LOAD PACKAGES #####
library(dplyr)
library(ggplot2)
library(ggrepel)
source(file = here::here("script/FctCleanFeaturesName.R"))
set.seed(1)
```

# Introduction

# Methods

## Use case

## Reservoir computing

## Genetic algorithm

## Experimental setup

### Penalization exploration

We explored to variant of the GA optimizing both the number of features
and the MAE :

1)  We changed the fitness function from $MAE$ to
    $MAE + \theta * nbfeatures$. In this case, $\theta$ is a penalty
    term penalizing genetic individuals selecting many features. We
    explore $\theta \in \{1e^{-3}, 5*1e^{-3}, 1e^{-2})$.
2)  We changed the tournament selection. When selecting new parents, we
    perform a three individuals tournament (instead of two), then we
    exclude the individual with the larger number of features and then
    we select the individual with the lowest $MAE$
3)  Finally, we explored an epidemiology guided feature selection where
    we keep the original GA but we only provide 11 features guided by
    expert knowledge.

# Results

## Forecast

```{r}
### 1) Load data
path_predictions <- here::here("results/experience_2/prediction")
ls_files <- list.files(path_predictions)
ls_files_full <- list.files(path_predictions, full.names = TRUE)
names(ls_files_full) <- gsub(ls_files, pattern = "_combined.csv", replacement = "")
ls_files_full <- grep(ls_files_full, pattern = "*_epidemio_*", invert = TRUE, value = "TRUE")

df_all_temp <- lapply(ls_files_full, read.csv) %>%
  bind_rows(.id = "model") %>%
  mutate(outcomeDate = as.Date(outcomeDate),
         model = factor(model)) %>%
  group_by(outcomeDate, model) %>%
  filter(outcomeDate >= as.Date("2021-03-15"))

df_all <- df_all_temp %>% slice_min(hp_date) %>% mutate(update = "No") %>%
  bind_rows(df_all_temp %>% slice_max(hp_date) %>% mutate(update = "Yes")) %>%
  ungroup() |> 
  mutate(Penalization = case_when(model == "GeneticSingleIs_GA_epidemio" ~ -2,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty9999_TournamentFeaturesPenalty0" ~ -1,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty0_TournamentFeaturesPenalty1" ~ 0,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty1_TournamentFeaturesPenalty0" ~ 1e-3,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty5_TournamentFeaturesPenalty0" ~ 5*1e-3,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty10_TournamentFeaturesPenalty0" ~ 1e-2),
         model = case_when(Penalization == -2 ~ "Epidemio",
                           Penalization == -1 ~ "Mutation adaptation",
                           Penalization == 0 ~ "Tournament penalization",
                           Penalization > 0 ~ paste0("Penalization = ", Penalization)),
         update = factor(update, levels = c("No", "Yes"), labels = c("No monthly update", "Monthly update")))

```

### Sanity check

First, we check that there is 40 reservoir prediction for each day of
the prediction for each scenario. We observe that there is indeed a
forecast for each day. Some days have less than 40 reservoirs but the
minimum is 39 which seems acceptable.

```{r sanitycheck, fig.height=4, fig.cap="Number of reservoir per day for prediction"}
expand.grid(update = unique(df_all$update),
            model = unique(df_all$model),
            outcomeDate = unique(df_all$outcomeDate)) |> 
  full_join(df_all,
            by = c("update", "model", "outcomeDate")) |> 
  group_by(update, model, outcomeDate) |> 
  summarise(n = n(), .groups = "drop") |> 
  ggplot(mapping = aes(x = outcomeDate, y = n, color = update)) +
  geom_line() +
  facet_grid(model ~ update) +
  theme_minimal() +
  theme(strip.text.y = element_text(angle = 0),
        legend.position = "none") +
  labs(x = "Date", y = "Nb of reservoir")
```

### Performance

```{r}
df_perf <- df_all %>%
  mutate(outcome = if_else(outcome < 10, 10, outcome),
         pred = if_else(pred < 10, 10, pred),
         hosp = if_else(hosp < 10, 10, hosp)) %>%
  group_by(outcomeDate, model, Penalization, update) %>%
  summarise(outcome = unique(outcome),
            hosp = unique(hosp),
            pred = median(pred),
            .groups = "drop") %>%
  mutate(AE = abs(pred - outcome),
         RE = AE/outcome,
         baseline_AE = abs(hosp - outcome),
         AE_baseline = AE - baseline_AE,
         RE_baseline = AE/baseline_AE) %>%
  group_by(model, Penalization, update) %>%
  summarise(sd_AE = sd(AE, na.rm = T),
            AE = mean(AE, na.rm = T),
            sd_AE_baseline = sd(AE_baseline, na.rm = T),
            AE_baseline = mean(AE_baseline, na.rm = T),
            sd_RE = sd(RE, na.rm = TRUE),
            RE = median(RE, na.rm = TRUE),
            sd_RE_baseline = sd(RE_baseline, na.rm = TRUE),
            RE_baseline = median(RE_baseline, na.rm = TRUE),
            .groups = "drop") %>%
  select(model, Penalization, update, AE, sd_AE, AE_baseline, sd_AE_baseline, RE, sd_RE, RE_baseline, sd_RE_baseline)

df_perf %>%
  mutate(across(c("AE", "RE", "AE_baseline", "RE_baseline", starts_with("sd_")),
                ~ round(.x, 2))) |> 
  mutate(update = update,
         model = model,
         MAE = paste0(AE, "(\u00B1", sd_AE, ")"),
         MRE = paste0(RE, "(\u00B1", sd_RE, ")"),
         MAEB = paste0(AE_baseline, "(\u00B1", sd_AE_baseline, ")"),
         MREB = paste0(RE_baseline, "(\u00B1", sd_RE_baseline, ")"),
         .keep = "none") |> 
  # knitr::kable(format = "latex", booktabs = TRUE)
  knitr::kable(digits = 3,
               caption = "Model performance") %>%
  kableExtra::kable_styling()

```

```{r lineperf}
graph_perf <- df_perf |> 
  ggplot(mapping = aes(x = model, y = AE, color = update)) +
  geom_point() +
  theme_minimal() +
  scale_color_manual(values = c("black", "grey")) +
  labs(y = "Mean absolute error",
       x = "",
       color = "Update") +
  theme(axis.text.x = element_text(angle = 90))

graph_perf
```

# Hyperparameters

```{r}
path_hp <- here::here("results/experience_2/hyperparameters/")
ls_files_full <- list.files(path_hp, full.names = TRUE, recursive = TRUE)
numeric_hp <- c("ridge",
                "spectral_radius",
                "leaking_rate",
                "input_scaling")

df_all_hp <- lapply(ls_files_full,
                    function(file_i) readr::read_csv(file_i, id = "model")) |> 
  bind_rows() |> 
  tibble::rowid_to_column(var = "genetic_id") |> 
  mutate(file_hp = gsub(x = file_hp, pattern = ".csv", replacement = ""),
         file_hp = if_else(grepl(x = file_hp,
                                 pattern = "GeneticSingleIs_GA"),
                           "2021-03-01",
                           file_hp),
         last_used_observation = as.Date(file_hp),
         model = gsub(model, pattern = ".*hyperparameters//", replacement = ""),
         model = gsub(model, pattern = "_hyperparameters.csv$", replacement = "")) |> 
  mutate(Penalization = case_when(model == "GeneticSingleIs_GA_epidemio" ~ -2,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty9999_TournamentFeaturesPenalty0" ~ -1,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty0_TournamentFeaturesPenalty1" ~ 0,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty1_TournamentFeaturesPenalty0" ~ 1e-3,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty5_TournamentFeaturesPenalty0" ~ 5*1e-3,
                                  model == "GeneticSingleIs_GA_GAPENAL_NbFeaturesPenalty10_TournamentFeaturesPenalty0" ~ 1e-2),
         model = case_when(Penalization == -2 ~ "Epidemio",
                           Penalization == -1 ~ "Mutation adaptation",
                           Penalization == 0 ~ "Tournament penalization",
                           Penalization > 0 ~ paste0("Penalization = ", Penalization))) |> 
  filter(last_used_observation < as.Date("2022-01-17"),
         value != 1000)

## get the best 40 by date
df_all_hp_best40 <- df_all_hp %>%
  group_by(model, last_used_observation) %>%
  slice_min(value, n = 40) |> 
  ungroup()
```

## Sanity check

```{r}
df_all_hp |> 
  group_by(last_used_observation, model) |> 
  summarise(n = n(), .groups = "drop") |> 
  ggplot(mapping = aes(x = last_used_observation, y = n, fill = model)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("#001219", "#BB3E03", "#005F73", "#0A9396", "#94D2BD", "#EE9B00")) +
  labs(y = "nb of genetic individuals",
       x = "update date") +
  theme_minimal()
```

## Numeric hyperparameters

### Hyperparameter evolution

```{r fig.height=8, fig.cap="Numeric hyperparameter, density of 40 best genetic individuals per hyperparameter update date."}
plot_best_numeric_hp <- df_all_hp_best40 |> 
  select(model, last_used_observation, all_of(numeric_hp)) |> 
  tidyr::pivot_longer(cols = numeric_hp, names_to = "hyperparameter") |> 
  mutate(last_used_observation = as.factor(last_used_observation),
         last_used_observation = forcats::fct_rev(last_used_observation)) |> 
  ggplot(mapping = aes(x = value,
                       y = last_used_observation,
                       group = interaction(last_used_observation, hyperparameter),
                       fill = hyperparameter,
                       color = hyperparameter)) +
  ggridges::geom_density_ridges(alpha = 0.5) +
  facet_wrap(model ~ ., scales = "free_y", switch = "both") +
  scale_x_log10(breaks = c(1e-10, 1e-5, 1, 1e5)) +
  scale_fill_manual(values = c("#264653", "#2A9D8F", "#F4A261", "#E76F51")) +
  scale_color_manual(values = c("#264653", "#2A9D8F", "#F4A261", "#E76F51")) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(x = "Hyperparameter value",
       y = "Update Date")

plot_best_numeric_hp
```

## Categorical hyperparameters

```{r fig.height=6, fig.cap="Number of selected features among the best genetic individuals."}
df_all_hp_best40_qual <- df_all_hp |> 
  select(genetic_id, model, last_used_observation, ends_with("_bin"))

temp <- df_all_hp_best40_qual |> 
  tidyr::pivot_longer(cols = ends_with("_bin")) |> 
  filter(!(is.na(value) & model == "Epidemio")) |> 
  group_by(genetic_id, model, last_used_observation) |> 
  summarise(n_features = sum(value == "y"), .groups = "drop") |> 
  mutate(last_used_observation = as.factor(last_used_observation)) |> 
  group_by(model, last_used_observation) |> 
  summarise(median = median(n_features),
            q1 = quantile(n_features, .25),
            q3 = quantile(n_features, .75),
            .groups = "drop")

plot_nb_features <- temp |> 
  ggplot(mapping = aes(color = model,
                       y = median,
                       ymin = q1,
                       ymax = q3,
                       x = last_used_observation,
                       group = model)) +
  geom_errorbar(width = 0, position = position_dodge(width=.5)) +
  geom_point(position = position_dodge(width=.5)) +
  geom_line(position = position_dodge(width=.5)) +
  scale_color_manual(values = c("#001219", "#BB3E03", "#005F73", "#0A9396", "#94D2BD", "#EE9B00")) +
  scale_y_continuous(breaks = seq(0,400, by =20)) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "Date",
       y = "Number of selected features",
       color = "P(mutation categorical genes)")

plot_nb_features
```

```{r freqselectionfeatures, fig.height=4}
df_freq_selection <- df_all_hp_best40_qual |>  
  tidyr::pivot_longer(cols = ends_with("_bin")) |>  
  filter(!(is.na(value) & model == "Epidemio")) |> 
  group_by(model, last_used_observation, name) |>  
  summarise(value = mean(value == "y"), .groups = "drop") |> 
  mutate(last_used_observation = as.factor(last_used_observation))

plot_distribution_feature_selection <- ggplot(df_freq_selection,
                                              mapping = aes(x = value,
                                                            fill = last_used_observation,
                                                            color = last_used_observation,
                                                            y = model,
                                                            group = interaction(model, last_used_observation))) +
  ggridges::geom_density_ridges(alpha = 0.2) +
  geom_vline(xintercept = .5, linetype = 2, color = "darkgrey") +
  scale_fill_viridis_d() +
  scale_color_viridis_d() +
  scale_x_continuous(limits = c(0,1),
                     breaks = c(0, .5, 1)) +
  labs(y = "",
       x = "Frequency of feature selection",
       fill = "Date update",
       color = "Date update") +
  theme_minimal()

plot_distribution_feature_selection
```

```{r fig.height=8}
df_plot <- df_freq_selection |> 
  filter(model == "Epidemio") |> 
  group_by(name) |> 
  mutate(mean_prop = sum(value*(last_used_observation == "2022-01-01"))) |>
  ungroup() |> 
  mutate(name = FctCleanFeaturesName(name),
         name = as.factor(name),
         name = forcats::fct_reorder(name, -mean_prop),
         deriv = grepl(name, pattern = "(1st d)"),
         deriv = factor(deriv,
                        levels = c(F,T),
                        labels = c("Raw", "1st derivative")))

ggplot(data = df_plot,
       mapping = aes(y = value,
                     x = last_used_observation,
                     group = name,
                     label = name,
                     color = name)) +
  geom_line() +
  geom_text_repel(data = df_plot |> 
                    filter(last_used_observation == "2022-01-01"),
                  size = 3,
                  nudge_x = 6,
                  direction = "y",
                  force = 5,
                  arrow = arrow(length = unit(0.01, "npc"), type = "closed")) +
  scale_y_continuous(breaks = c(0,.5,1), limits = c(0,1)) +
  scale_color_viridis_d(option = "B", end = 0.85) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "none") +
  labs(y = "Frequency of feature selection",
       x = "Date update")
```

```{r fig.height=8}
df_plot <- df_freq_selection |> 
  filter(model == "Mutation adaptation") |> 
  group_by(name) |> 
  mutate(mean_prop = sum(value*(last_used_observation == "2022-01-01"))) |>
  ungroup() |> 
  mutate(name = FctCleanFeaturesName(name),
         name = as.factor(name),
         name = forcats::fct_reorder(name, -mean_prop),
         deriv = grepl(name, pattern = "(1st d)"),
         deriv = factor(deriv,
                        levels = c(F,T),
                        labels = c("Raw", "1st derivative")))

ggplot(data = df_plot,
       mapping = aes(y = value,
                     x = last_used_observation,
                     group = name,
                     label = name,
                     color = name)) +
  geom_line() +
  geom_text_repel(data = df_plot |> 
                    filter(last_used_observation == "2022-01-01") |> 
                    filter(value > 0.25),
                  size = 3,
                  nudge_x = 6,
                  direction = "y",
                  force = 5,
                  arrow = arrow(length = unit(0.01, "npc"), type = "closed")) +
  scale_y_continuous(breaks = c(0,.5,1), limits = c(0,1)) +
  scale_color_viridis_d(option = "B", end = 0.85) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "none") +
  labs(y = "Frequency of feature selection",
       x = "Date update")
```
